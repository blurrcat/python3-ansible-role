---

- name: Include Ubuntu-specific installation tasks
  include: install/Ubuntu.yml
  when: ansible_distribution == 'Ubuntu'

- name: Include Python user management tasks
  include: user.yml

- name: Create the Python configuration directory
  file:
    path: "{{ python_configuration_dir }}"
    owner: "{{ python_user }}"
    group: "{{ python_group }}"
    state: directory
  sudo: yes

- name: Set the directory permissions for the Python configuration directory
  file:
    path: "{{ python_configuration_dir }}"
    owner: "{{ python_user }}"
    group: "{{ python_group }}"
    mode: 0755
    state: directory
  sudo: yes

- name: Write out the Python version and the flags used for the build
  template:
    src: .python_compilation_flags.j2
    dest: "{{ python_configuration_dir }}/.python_compilation_flags"
  sudo: yes
  sudo_user: "{{ python_user }}"
  register: python_build_flags

- name: Creates Python source directory
  file:
    path: "{{ python_source_dir }}"
    state: directory
  sudo: yes
  when: python_build_flags.changed

- name: Download the XZ-compressed Python source
  get_url:
    url: "{{ python_source_url }}"
    dest: "{{ python_compressed_source_path }}"
  sudo: yes
  when: python_build_flags.changed

- name: Compute the md5sum of the compressed Python source
  stat:
    path: "{{ python_compressed_source_path }}"
    get_md5: yes
  sudo: yes
  register: python_source_verification
  when: python_build_flags.changed

- name: Verify the md5sum of the compressed Python source
  fail:
    msg: "The md5sum of the compressed Python source does not match the expected value"
  when: python_source_verification is defined and python_source_verification.stat.md5 != "{{ python_compressed_source_md5sum }}"

- name: Unpack the Python source and remove the compressed Python source
  shell: >
    tar -xJC {{ python_source_dir }} --strip-components=1 -f {{ python_compressed_source_path }} &&
    rm {{ python_compressed_source_path }}
  sudo: yes
  when: python_build_flags.changed

- name: Configure makefile, compile and install Python binaries
  shell: >
    cd {{ python_source_dir }} &&
    ./configure {{ python_source_configure_flags }} &&
    make -j$(nproc) &&
    make altinstall
  sudo: yes
  when: python_build_flags.changed

- name: Update ownership on the Python install directory and its contents
  file:
    path: "{{ python_install_prefix_dir }}"
    owner: "{{ python_user }}"
    group: "{{ python_group }}"
    recurse: yes
    state: directory
  sudo: yes

- name: Remove uncompressed Python source and build artifacts
  file:
    path: "{{ python_source_dir }}"
    state: absent
  sudo: yes

- name: Insert Python shared libraries directory into ld.so.conf file
  lineinfile:
    dest: /etc/ld.so.conf
    line: "{{ python_libraries_dir }}"
    insertafter: EOF
  sudo: yes
  when: python_build_flags.changed
  
- name: Update system shared libraries to include new Python libraries
  shell: >
    ldconfig
  sudo: yes
  when: python_build_flags.changed

- name: Bootstrap the pip installer
  shell: >
    "{{ python_exec_path }}" -m ensurepip --altinstall
  sudo: yes
  sudo_user: "{{ python_user }}"
  when: python_build_flags.changed

- name: Ensure pip is at the latest version
  shell: >
    "{{ python_pip_exec_path }}" install pip --upgrade
  sudo: yes
  sudo_user: "{{ python_user }}"
  register: pip_upgrade_output
  changed_when: '"""${pip_upgrade_output.stdout}""".find("Requirement already up-to-date") != -1'
  when: python_virtualenv_install

- name: Install virtualenv via pip
  pip:
    name: virtualenv
    executable: "{{ python_pip_exec_path }}"
  sudo: yes
  sudo_user: "{{ python_user }}"
  when: python_virtualenv_install

- name: Create and populate the specified Python virtual environments
  pip:
    requirements: "{{ item.requirements }}"
    virtualenv: "{{ python_virtualenv_home_dir }}/{{ item.name }}"
    virtualenv_command: "{{ python_virtualenv_exec_path }}"
    executable: "{{ python_virtualenv_home_dir }}/{{ item.name }}/bin/pip{{ python_major_minor_version }}"
  sudo: yes
  sudo_user: "{{ python_user }}"
  with_items: python_virtualenvs
  when: python_virtualenv_install and python_virtualenvs|length > 0
